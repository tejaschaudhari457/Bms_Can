/*MCP2515         ESP32
--------        -----
VCC     →       3.3V
GND     →       GND
CS      →       GPIO5        // Chip Select
SCK     →       GPIO18       // SPI Clock
MOSI    →       GPIO23       // SPI Data to MCP
MISO    →       GPIO19       // SPI Data from MCP
INT     →       GPIO4        // (Optional, Interrupt pin)
*/

/*MCP2515         JBD BMS
--------        --------
CAN_H   →       CAN_H
CAN_L   →       CAN_L
*/

#include <SPI.h>
#include <mcp_can.h>

#define CAN_CS 5  // MCP2515 CS pin
MCP_CAN CAN(CAN_CS);  // Create CAN instance

void setup() {
  Serial.begin(115200);
  while (CAN_OK != CAN.begin(MCP_ANY, CAN_500KBPS, MCP_8MHZ)) {
    Serial.println("CAN init failed, retrying...");
    delay(1000);
  }
  Serial.println("CAN Init Success");
  CAN.setMode(MCP_NORMAL);
}

void loop() {
  if (CAN_MSGAVAIL == CAN.checkReceive()) {
    long unsigned int canId;
    byte len = 0;
    byte buf[8];
    
    CAN.readMsgBuf(&canId, &len, buf);

    Serial.print("CAN ID: 0x");
    Serial.println(canId, HEX);

    if (canId == 0x100) {
      uint16_t voltage = (buf[0] << 8) | buf[1];  // in 10mV
      int16_t current = (buf[2] << 8) | buf[3];   // in 10mA
      uint16_t remCap = (buf[4] << 8) | buf[5];   // in 10mAh

      Serial.print("Voltage        : ");
      Serial.print(voltage / 100.0);
      Serial.println(" V");

      Serial.print("Current        : ");
      Serial.print(current / 100.0);
      Serial.println(" A");

      Serial.print("Remaining Cap  : ");
      Serial.print(remCap / 1000.0);
      Serial.println(" Ah");

    } else if (canId == 0x101) {
      uint16_t fullCap = (buf[0] << 8) | buf[1];   // 10mAh
      uint16_t cycles = (buf[2] << 8) | buf[3];
      uint16_t rsoc   = (buf[4] << 8) | buf[5];

      Serial.print("Full Capacity  : ");
      Serial.print(fullCap / 1000.0);
      Serial.println(" Ah");

      Serial.print("Cycle Count    : ");
      Serial.println(cycles);

      Serial.print("SOC (%)        : ");
      Serial.println(rsoc);

    } else if (canId == 0x102) {
      uint16_t protectionFlags = (buf[4] << 8) | buf[5];
      Serial.print("Protection Flag: 0x");
      Serial.println(protectionFlags, HEX);
    } else if (canId == 0x103) {
      uint16_t mosStatus = (buf[0] << 8) | buf[1];
      uint16_t date = (buf[2] << 8) | buf[3];
      uint16_t version = (buf[4] << 8) | buf[5];

      byte day   = date & 0x1F;
      byte month = (date >> 5) & 0x0F;
      int year   = 2000 + ((date >> 9) & 0x7F);

      Serial.print("MOS Status     : ");
      Serial.println(mosStatus, BIN);

      Serial.print("Manufactured   : ");
      Serial.print(day);
      Serial.print("-");
      Serial.print(month);
      Serial.print("-");
      Serial.println(year);

      Serial.print("Software Ver.  : ");
      Serial.println(version);
    } else if (canId >= 0x107 && canId <= 0x10F) {
      // Cell voltages (3 per frame)
      for (int i = 0; i < 3; i++) {
        uint16_t cellVoltage = (buf[i * 2] << 8) | buf[i * 2 + 1];
        Serial.print("Cell ");
        Serial.print((canId - 0x107) * 3 + i + 1);
        Serial.print(" Voltage: ");
        Serial.print(cellVoltage / 1000.0);
        Serial.println(" V");
      }
    }

    Serial.println("----------------------------");
  }
}
